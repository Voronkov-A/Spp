public partial class {{classname}}TestClient : I{{classname}}TestClient
{
    private const int Default = -1;
    private static readonly System.Net.Http.HttpMethod DELETE = System.Net.Http.HttpMethod.Delete;
    private static readonly System.Net.Http.HttpMethod GET = System.Net.Http.HttpMethod.Get;
    private static readonly System.Net.Http.HttpMethod POST = System.Net.Http.HttpMethod.Post;
    private static readonly System.Net.Http.HttpMethod PUT = System.Net.Http.HttpMethod.Put;

    private readonly System.Net.Http.HttpClient _httpClient;
    private readonly System.Text.Json.JsonSerializerOptions _jsonSerializerOptions;

    public {{classname}}TestClient(System.Net.Http.HttpClient httpClient, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
    {
        _httpClient = httpClient;
        _jsonSerializerOptions = jsonSerializerOptions;
    }

    public void Dispose()
    {
        Dispose(true);
        System.GC.SuppressFinalize(this);
    }

    {{#operation}}
    /// <summary>
    /// {{notes}}
    /// </summary>
    public async System.Threading.Tasks.Task<I{{classname}}TestClient.{{operationIdCamelCase}}ClientResponse> {{operationIdCamelCase}}(
        System.Net.Http.HttpRequestMessage request,
        System.Threading.CancellationToken cancellationToken = default
    )
    {
        if (_httpClient.BaseAddress != null
            && request.RequestUri != null
            && !_httpClient.BaseAddress.IsBaseOf(request.RequestUri))
        {
            throw new System.InvalidOperationException(
                $"{_httpClient.BaseAddress} is not a base address for {request.RequestUri}.");
        }

        using var response = await _httpClient.SendAsync(request, cancellationToken);

        {{#responses}}
        if ((int)response.StatusCode == {{code}} || {{code}} == -1)
        {
            {{#dataType}}
            var content = await System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync<{{dataType}}?>(
                response.Content,
                _jsonSerializerOptions,
                cancellationToken
            ) ?? throw new System.InvalidOperationException("Code is {{code}}, but content is null.");
            {{/dataType}}

            return I{{classname}}TestClient.{{operationIdCamelCase}}ClientResponse.Create{{code}}(response.StatusCode, response.Headers{{#dataType}}, content{{/dataType}});
        }
        {{/responses}}

        {{#defaultReturnType}}
#pragma warning disable CS0162 // Code is unreachable
        throw new System.InvalidOperationException("Code is unreachable.");
#pragma warning restore CS0162 // Code is unreachable
        {{/defaultReturnType}}
        {{^defaultReturnType}}
        var bytes = await response.Content.ReadAsByteArrayAsync(cancellationToken);
        return I{{classname}}TestClient.{{operationIdCamelCase}}ClientResponse.CreateDefault(response.StatusCode, response.Headers, bytes);
        {{/defaultReturnType}}
    }

    /// <summary>
    /// {{notes}}
    /// </summary>
    public async System.Threading.Tasks.Task<I{{classname}}TestClient.{{operationIdCamelCase}}ClientResponse> {{operationIdCamelCase}}(
        {{#allParams}}
        {{dataType}}{{^required}}?{{/required}} {{paramName}},
        {{/allParams}}
        System.Threading.CancellationToken cancellationToken = default
    )
    {
        using var request = {{operationIdCamelCase}}_CreateRequest(
            {{#allParams}}
            {{paramName}}{{^-last}},{{/-last}}
            {{/allParams}}
        );

        return await {{operationIdCamelCase}}(request, cancellationToken);
    }
    {{/operation}}
    {{#operation}}

{{>clientCreateRequestMethod}}
    {{/operation}}

    ~{{classname}}TestClient()
    {
        Dispose();
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static")]
    partial void ValueToString<T>(T value, ref string? result) where T : notnull;

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static")]
    partial void EnumToString<T>(T value, ref string? result) where T : struct, System.Enum;

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            _httpClient.Dispose();
        }
    }

    private string ValueToString<T>(T value) where T : notnull
    {
        string? result = null;
        ValueToString(value, ref result);

        if (result != null)
        {
            return result;
        }

        return value.ToString()
            ?? throw new System.InvalidOperationException("UrlEncode returned null.");
    }

    private string EnumToString<T>(T value) where T : struct, System.Enum
    {
        string? result = null;
        EnumToString(value, ref result);
        return result ?? ValueToString(value);
    }

    private static string UrlEncode(string value)
    {
        return System.Web.HttpUtility.UrlEncode(value.ToString())
            ?? throw new System.InvalidOperationException("UrlEncode returned null.");
    }
}