---
openapi: 3.1.0
info:
  title: Authorization Connect API (OIDC)
  version: 1.0.0

paths:

  /.well-known/openid-configuration:
    get:
      description: |
        This endpoint follows the specification defined at
        http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata. It provides a
        mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and
        obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
      operationId: GetDiscoveryDocument
      tags:
        - Connect
      responses:
        '200':
          description: OpenID Discovery Configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryDocumentResponse'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /connect/token:
    post:
      description: |
        Request access_token or refresh_token using OAuth 2.0 grant_type. See RFC 6749 for more
        details.
      operationId: RequestAuthorizationCodeToken
      tags:
        - Connect
      requestBody:
        description: Token request.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: |
            A success response that includes the issued token, expire and other details from the
            OAuth Server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /connect/introspect:
    post:
      description: The introspection endpoint is an implementation of RFC 7662.
      operationId: IntrospectToken
      tags:
        - Connect
      security:
        - bearerAuth: []
      requestBody:
        description: Introspection request.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IntrospectionRequest'
      responses:
        '200':
          description: |
            A successful response will return a status code of 200 and either an active or inactive
            token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntrospectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /connect/revocation:
    post:
      description: |
        This endpoint allows revoking access tokens (reference tokens only) and refresh token. It
        implements the token revocation specification (RFC 7009).
      operationId: RevokeToken
      tags:
        - Connect
      security:
        - bearerAuth: []
      requestBody:
        description: Revocation request.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RevocationRequest'
      responses:
        '204':
          description: No content.
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /connect/endsession:
    get:
      description: The end session endpoint can be used to trigger single sign-out in the browser.
      operationId: EndSession
      tags:
        - Connect
      security:
        - bearerAuth: []
      parameters:
        - name: id_token_hint
          in: query
          required: false
          description: |
            When the user is redirected to the endpoint, they will be prompted if they really want
            to sign-out. This prompt can be bypassed by a client sending the original id_token
            received from authentication. This is passed as a query string parameter called
            id_token_hint.
          schema:
            type: string
        - name: post_logout_redirect_uri
          in: query
          required: false
          description: |
            If a valid id_token_hint is passed, then the client may also send a
            post_logout_redirect_uri parameter. This can be used to allow the user to redirect back
            to the client after sign-out. The value must match one of the clientâ€™s pre-configured
            PostLogoutRedirectUris.
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: |
            If a valid post_logout_redirect_uri is passed, then the client may also send a state
            parameter. This will be returned back to the client as a query string parameter after
            the user redirects back to the client. This is typically used by clients to round-trip
            state across the redirect.
          schema:
            type: string
      responses:
        '204':
          description: No content.
        '302':
          description: Redirect.
          headers:
            Location:
              description: Location to redirect.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:

    BadRequestErrorResponse:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    UnauthorizedErrorResponse:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    DefaultErrorResponse:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  schemas:

    DiscoveryDocumentResponse:
      description: |
        The OpenID configuration document as defined by the specification:
        http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata.
      type: object
      additionalProperties: false
      required:
        - authorization_endpoint
        - id_token_signing_alg_values_supported
        - issuer
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - token_endpoint
      properties:
        userinfo_endpoint:
          description: URL of the user info endpoint.
          type: string
          example: 'https://example.com:8443/openid/connect/v1/userinfo'
        jwks_uri:
          description: URL of JSON Web Key Set document.
          type: string
          example: 'https://example.com/openid/connect/jwks.json'
        scopes_supported:
          description: List of the OAuth 2.0 scope values that this server supports.
          type: array
          items:
            type: string
          example:
            - openid
        subject_types_supported:
          description: List of the Subject Identifier types that this OP supports.
          type: array
          items:
            type: string
          example:
            - pairwise
        token_endpoint:
          description: URL of the OAuth 2.0 token endpoint.
          type: string
          example: 'https://example.com:8443/auth/oauth/v2/token'
        id_token_signing_alg_values_supported:
          description: |
            List of the JWS signing algorithms (alg values) supported by the OP for the ID Token to
            encode the Claims in a JWT.
          type: array
          items:
            type: string
          example:
            - RS256
            - HS256
        response_types_supported:
          description: List of the OAuth 2.0 response_type values that this OP supports.
          type: array
          items:
            type: string
          example:
            - code
            - token_id_token
        claims_supported:
          description: |
            List of the Claim Names of the Claims that the OpenID Provider MAY be able to supply
            values for.
          type: array
          items:
            type: string
          example:
            - sub
            - iss
            - auth_time
            - acr
        authorization_endpoint:
          description: URL of the OAuth 2.0 authorization endpoint.
          type: string
          example: 'https://example.com:8443/auth/oauth/v2/authorize'
        issuer:
          description: |
            The identifier of the token's issuer. This is identical to the 'iss' Claim value in ID
            Tokens.
          type: string
          example: 'https://example.com'
        grant_types_supported:
          description: List of the OAuth 2.0 Grant Type values that this OP supports.
          type: array
          items:
            type: string
          example:
            - authorization_code
            - implicit
        acr_values_supported:
          description: List of the Authentication Context Class References that this OP supports.
          type: array
          items:
            type: string
          example:
            - 'urn:mace:incommon:iap:silver'
        token_endpoint_auth_methods_supported:
          description: List of Client Authentication methods supported by this Token Endpoint.
          type: array
          items:
            type: string
          example:
            - client_secret_basic
        token_endpoint_auth_signing_alg_values_supported:
          description: |
            List of the JWS signing algorithms (alg values) supported by the Token Endpoint for the
            signature on the JWT used to authenticate the Client at the Token Endpoint for the
            private_key_jwt and client_secret_jwt authentication methods. Servers SHOULD support
            RS256. The value none MUST NOT be used.
          type: array
          items:
            type: string
          example:
            - RS256
        display_values_supported:
          description: List of the display parameter values that the OpenID Provider supports.
          type: array
          items:
            type: string
          example:
            - page
            - popup
        claim_types_supported:
          description: List of the Claim Types that the OpenID Provider supports.
          type: array
          items:
            type: string
          example:
            - normal
        service_documentation:
          description: |
            URL of a page containing human-readable information that developers might want or need
            to know when using the OpenID Provider.
          type: string
          example: 'http://masdemo12.dev.ca.com:8443/openid/connect/v1/service_documentation.html'
        ui_locales_supported:
          description: Languages and scripts supported for the user interface.
          type: array
          items:
            type: string
          example:
            - en-US
            - en-GB

    TokenRequest:
      description: Token request.
      type: object
      required:
        - client_id
        - grant_type
        - client_secret
      properties:
        client_id:
          description: |
            The client_id. This can only be used INSTEAD of using the authorization header. Maximum
            255 characters.
          type: string
        grant_type:
          allOf:
            - description: |
                For grant_type=client_credentials, either authorization or client_id AND
                client_secret must be provided.
                For grant_type=authorization_code: client_id, client_secret, code, and redirect_uri
                are required.
                For grant_type=refresh_token: client_id and refresh_token are required.
            - $ref: '#/components/schemas/GrantType'
        client_secret:
          description: The client_secret.
          type: string
        scope:
          description: |
            Only SCOPE values that were registered for this client will be granted. If only
            non-matching SCOPE values are requested, the request will fail.
          type: string

    TokenData:
      description: Token data.
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: The Access Token for the given token request.
        token_type:
          type: string
          description: The Token Type issued.
          example: Bearer
        expires_in:
          type: integer
          format: int64
          description: The expiry time, in seconds.
          example: 3600
        refresh_token:
          type: string
          description: The refresh token, if applicable.
        scope:
          type: string
          description: The issued scope.
          example: oob
        id_token:
          type: string
          description: |
            If the requested SCOPE included 'msso' or 'openid', response includes an id_token.
        id_token_type:
          type: string
          description: |
            If the requested SCOPE included 'msso' or 'openid', response includes an id_token_type.

    GrantType:
      description: Grant type.
      type: string
      enum:
        - client_credentials

    IntrospectionRequest:
      description: Introspection request.
      type: object
      required:
        - token
      properties:
        token:
          description: Token to introspect.
          type: string

    IntrospectionResponse:
      description: Introspection response.
      type: object
      required:
        - active
      properties:
        active:
          description: Either the token is active or inactive.
          type: boolean
        sub:
          description: Subject.
          type: string

    RevocationRequest:
      description: Revocation request.
      type: object
      required:
        - token
      properties:
        token:
          description: The token to revoke.
          type: string
        token_type_hint:
          $ref: '#/components/schemas/TokenType'

    TokenType:
      description: Token type.
      type: string
      enum:
        - access_token

    ProblemDetails:
      $ref: './common.errors.yaml#/components/schemas/ProblemDetails'
